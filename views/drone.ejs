<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous"/>
    <title>Document</title>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
   
    <script>
        const ROOM_ID = "1234"
        const PORT = "<%= PORT %>"
    </script>
    
</head>
<style>
    html{
        height: 100%;
    }
    body{
        background-color: black;
        height: 100%;
        margin:0px;
        padding: 0px;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .video-grid{
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        justify-content: space-around;
        overflow: auto;
        width: 100%;
        height: 100%;
    }
    video{
        width: 400px;
        border-radius: 6px;
        height: 350px;
        max-height: 350px;
        object-fit: cover;
    }
    .videoOuter{
        max-width: 400px;
        border-radius: 6px;
        height: 350px;
        position: relative;
        overflow: hidden;
    }
    .flex{
        display: flex;
    }
    .flex-row{
        flex-direction: row;
    }
    .align-center{
        align-items: center;
    }
    .justify-center{
        justify-content: center;
    }
    i{
        margin: 10px;
    }
    .overlay{
        position: absolute;
        top:0px;
        bottom:0px;
        left:1px;
        right:0px;
        background-color: #636363;
        z-index: 3;
        display: none;
    }
    .chat{
        width: 250px;
        position: absolute;
        top:0;
        bottom:0;
        right:0;
        background-color: white;
        overflow: hidden;
        flex-direction: column;
    }
    .bottom{
        background-color: #2e2e2d;
        height:40px
    }
    #audio,#video,#chat,#present{
        font-size: 23px;
    }
    
    .chat-input{
        border: none;
        outline: none;
        background-color: transparent;
    }
    .chat-input-outer{
        border: none;
        width: 250px;
        padding:10px;
        background-color: #cfcfcf;
    }
    .messages{
        width: 250px;
        height: 100%;
        padding:10px;
    }
    .message{
        font-size: 15px;
        font-family: Arial, Helvetica, sans-serif;
    }
    .user-name{
        font-size: 16px;
        font-weight: 500;
        font-family: Arial, Helvetica, sans-serif;
        margin-bottom: 3px;
    }
    .message-wrapper{
        margin-bottom: 10px;
    }
    .present_area{

    }
    @media screen and (max-width:700px) {
        .video-grid{
            display: block;
        }
    }
    @keyframes enterMessage{
        0%{
            transform: translateX(250px);
        }
        100%{
            transform: translateX(0);
        }
    }
    @keyframes goneMessage{
        0%{
            transform: translateX(0);
        }
        100%{
            transform: translateX(250px);
        }
    }
</style>
<body>
        <div style="width:100%;height: 100%;position: relative;height: 100%;">
            <div style="display: flex;flex-direction: row;padding: 10px;align-items: center;height: 100%;">
                <div id="present_area" class="present_area" style="width: 100%;height: 600px;max-height: 600px; color: white;background-color: gray; border-radius: 10px;">
                    
                    <h1 style="text-align: center;">Drone</h1>
                    
                </div>
                <div id="video-grid" class="video-grid">
                    <img src="http://192.168.43.122:81/stream" width="100%" height="100%">
                </div>
            </div>
            
            <div id="chatBox" class="chat" style="transform: translateX(250px);height: 100%;display: flex;">
                <div id="userMessages" class="messages">

                </div>
                <div class="chat-input-outer flex flex-row" style="justify-content: space-between;">
                    <input placeholder="Type Here" id="chatInput" class="chat-input"></input>
                    <i id="messageSend" onclick="sendMessage()" class="fa fa-paper-plane" style="color: white; padding-right: 10px;"></i>
                </div>
            </div>
        </div>
        <script>
                const socket = io('/')
//check for user
const peer = new Peer(undefined,{
    host:'online-meet-69.herokuapp.com',
    path:"/peerjs"
})


let myVideoStream;
const myVideo = document.createElement('video')
myVideo.muted=true
alert("Hi")
navigator.mediaDevices.getUserMedia({
    video:true,
    audio:true
}).then(stream=>{
   
    myVideoStream=stream
    alert(`${myVideoStream.getVideoTracks().length}`)
    document.getElementById('audio').onclick=muteUnmute
    document.getElementById('video').onclick=playStop
    // provide our stream
    peer.on('call',call=>{
        call.answer(stream)
        const video = document.createElement("video")
        call.on('stream',userVideoStream=>{
            addVideoStream(video,userVideoStream)
        })
        call.on('drone',droneStream=>{
            addVideoStream(video,droneStream)
        })
    })
    addVideoStream(myVideo,stream)
    socket.on('user-connected',(userId)=>{
        if(userId!==peer.id)
            setTimeout(ConnectToAnotherUser,3000,userId,stream);
        
    })
    peer.on('error',err=>{
        console.log(err)
    })
}).catch(err=>{
    console.log(err) 
})



function callbackFunc(response) {
    // do something with the response
    console.log(response);
}

peer.on('open',(id)=>{
    console.log(id)
    socket.emit('join-room',ROOM_ID,id)
})

//chats display toggle
function toggleChat(){
    const chatBox = document.getElementById("chatBox")
    if(chatBox.style.animationName==="goneMessage"||chatBox.style.animationName===""){
        chatBox.style.animationName="enterMessage"
        chatBox.style.animationDuration="0.8s"
        chatBox.style.transform="translateX(0)"
    }else{
        chatBox.style.animationName="goneMessage"
        chatBox.style.animationDuration="0.8s"
        chatBox.style.transform="translateX(250px)"
    }
}
// add other uservideos to ours
function ConnectToAnotherUser(userId,stream){
    const call = peer.call(userId,stream)
    const video = document.createElement("video")
    call.on('stream',userVideoStream=>{
        console.log("streamUser ",userVideoStream)
        addVideoStream(video,userVideoStream)
    })
    
    call.on('error',(error)=>{
        console.log(error);
    })
    peer.on('error', function(err) {
        console.log(err);
    });
}

// remove video when a user leaves

// send video and audio






// chat update
function sendMessage(){
    const input = document.getElementById('chatInput')
    socket.emit("messages",input.value,peer.id,ROOM_ID)
    input.value=""
}
socket.on('messageServer',(message,uid)=>{
    const div = document.createElement('div')
    div.innerHTML=message
    const outer = document.createElement('div')
    const user = document.createElement('div')
    user.innerText=uid
    outer.classList.add('message-wrapper')
    user.classList.add('user-name')
    div.classList.add('message')
    outer.appendChild(user)
    outer.appendChild(div)
    document.getElementById('userMessages').appendChild(outer)
})
//video stream
function addVideoStream(video,stream){
    video.srcObject=stream
    const div = document.createElement('div')
    div.classList.add('videoOuter')
    const overlay = document.createElement('div')
    overlay.classList.add('overlay')
    
    video.addEventListener('loadedmetadata',()=>{
        video.play()
    })
    div.appendChild(video)
    div.appendChild(overlay)
    document.getElementById('video-grid').appendChild(div)
}






        </script>
    </body>
</html>